/**
 * Personalization Service
 * 
 * Creates dynamic, personalized content based on user profile data
 * Handles motivational messages, workout recommendations, and adaptive UI
 */

import { userProfileService } from './userProfileService';

/**
 * Generate personalized greeting based on user profile and time
 */
export const getPersonalizedGreeting = (profile) => {
  const hour = new Date().getHours();
  const day = new Date().toLocaleDateString('fr-FR', { weekday: 'long' });
  const userName = profile?.personalInfo?.name || 'Utilisateur';
  
  let timeGreeting;
  if (hour < 12) timeGreeting = 'Bonjour';
  else if (hour < 17) timeGreeting = 'Bon apr√®s-midi';
  else timeGreeting = 'Bonsoir';
  
  const personalizedGreetings = [
    `${timeGreeting}, ${userName} ! Pr√™te pour un super ${day} ? üåü`,
    `${timeGreeting} ma championne ${userName} ! C'est parti pour une journ√©e incroyable ! ‚ú®`,
    `Salut ${userName} ! Ce ${day} va √™tre fantastique ! üí™`,
    `${timeGreeting}, ${userName} ! Tu vas briller aujourd'hui ! üî•`
  ];

  const greetingIndex = Math.floor(Math.random() * personalizedGreetings.length);
  return personalizedGreetings[greetingIndex];
};

/**
 * Generate motivational messages based on user progress and goals
 */
export const getPersonalizedMotivation = (profile, progress) => {
  const userName = profile?.personalInfo?.name || 'Championne';
  const goals = profile?.fitnessProfile?.goals || [];
  const level = profile?.fitnessProfile?.level || 'd√©butante';
  
  const motivationalMessages = {
    general: [
      `${userName}, chaque pas en avant est une victoire ! üéØ`,
      `Tu es plus forte que tu ne le penses, ${userName} ! üí™`,
      `${userName}, ta d√©termination est inspirante ! Continue ! ‚ú®`,
      `Bravo ${userName} ! Tu construis la meilleure version de toi-m√™me ! üåü`
    ],
    
    course_√†_pied: [
      `${userName}, chaque foul√©e te rapproche de tes objectifs ! üèÉ‚Äç‚ôÄÔ∏è`,
      `Tu cours vers ton succ√®s, ${userName} ! Garde le rythme ! ‚ö°`,
      `${userName}, ta passion pour la course est contagieuse ! üî•`
    ],
    
    renforcement_musculaire: [
      `${userName}, tu deviens plus forte √† chaque r√©p√©tition ! üí™`,
      `Ta force grandit chaque jour, ${userName} ! C'est impressionnant ! üî•`,
      `${userName}, tu sculptes ton corps et ton mental ! Fantastique ! ‚ú®`
    ],
    
    perte_de_poids: [
      `${userName}, chaque effort compte dans ton parcours ! üéØ`,
      `Tu transformes ton corps avec brio, ${userName} ! üåü`,
      `${userName}, ta pers√©v√©rance paie ! Continue sur cette lanc√©e ! üí™`
    ]
  };

  // Choose message based on user's primary goal
  let selectedMessages = motivationalMessages.general;
  if (goals.length > 0 && motivationalMessages[goals[0]]) {
    selectedMessages = motivationalMessages[goals[0]];
  }

  // Add progress-based messages
  if (progress && progress.completionRate > 80) {
    selectedMessages.push(`${userName}, ton taux de r√©ussite de ${progress.completionRate}% est exceptionnel ! üèÜ`);
  }

  if (progress && progress.streak > 3) {
    selectedMessages.push(`${userName}, ${progress.streak} jours de suite ! Tu es incroyable ! üî•`);
  }

  const messageIndex = Math.floor(Math.random() * selectedMessages.length);
  return selectedMessages[messageIndex];
};

/**
 * Generate personalized workout recommendations
 */
export const getPersonalizedWorkoutSuggestion = (profile) => {
  const dayOfWeek = new Date().getDay();
  const goals = profile?.fitnessProfile?.goals || [];
  const targetAreas = profile?.fitnessProfile?.targetAreas || [];
  const level = profile?.fitnessProfile?.level || 'd√©butante';
  
  const workoutSuggestions = {
    1: { // Lundi - Start strong
      title: "üí™ D√©marrage Puissant",
      description: "Commence ta semaine en force !",
      focus: goals.includes('renforcement_musculaire') ? 'Force & Endurance' : 'Cardio Dynamique',
      emoji: "üî•"
    },
    2: { // Mardi
      title: "‚ö° Mardi Tonique",
      description: "Parfait pour travailler tes zones cibl√©es !",
      focus: targetAreas.includes('abdos') ? 'Core & Stabilit√©' : 'Corps Entier',
      emoji: "üíé"
    },
    3: { // Mercredi
      title: "üèÉ‚Äç‚ôÄÔ∏è Mercredi Cardio",
      description: "Milieu de semaine, on maintient le rythme !",
      focus: goals.includes('course_√†_pied') ? 'Course & Cardio' : 'Mixte √ânergisant',
      emoji: "‚ö°"
    },
    4: { // Jeudi
      title: "üéØ Jeudi Pr√©cision",
      description: "Focus sur la technique et la progression !",
      focus: targetAreas.includes('squats') ? 'Squats & Fessiers' : 'Renforcement',
      emoji: "üéØ"
    },
    5: { // Vendredi
      title: "üéâ Vendredi Victoire",
      description: "Termine la semaine en beaut√© !",
      focus: 'Entra√Ænement Complet',
      emoji: "‚ú®"
    },
    6: { // Samedi
      title: "üåü Weekend Actif",
      description: "Profite du weekend pour bouger !",
      focus: level === 'd√©butante' ? 'Douceur & Mobilit√©' : 'Challenge Weekend',
      emoji: "üåà"
    },
    0: { // Dimanche
      title: "üí´ Dimanche Zen",
      description: "Une s√©ance douce pour bien finir la semaine !",
      focus: 'R√©cup√©ration Active',
      emoji: "üßò‚Äç‚ôÄÔ∏è"
    }
  };

  return workoutSuggestions[dayOfWeek] || workoutSuggestions[1];
};

/**
 * Generate personalized achievements and milestones
 */
export const getPersonalizedAchievements = (profile, progress) => {
  const userName = profile?.personalInfo?.name || 'Championne';
  const achievements = [];

  if (progress) {
    // Completion rate achievements
    if (progress.completionRate >= 90) {
      achievements.push({
        id: 'completion_master',
        title: 'Ma√Ætre de la R√©gularit√©',
        description: `${userName}, ${progress.completionRate}% de r√©ussite ! Tu es un mod√®le !`,
        icon: 'üèÜ',
        color: 'gold'
      });
    } else if (progress.completionRate >= 75) {
      achievements.push({
        id: 'consistency_champion',
        title: 'Championne de la Constance',
        description: `${progress.completionRate}% de r√©ussite, ${userName} ! Impressionnant !`,
        icon: 'ü•á',
        color: 'silver'
      });
    }

    // Streak achievements
    if (progress.streak >= 7) {
      achievements.push({
        id: 'week_warrior',
        title: 'Guerri√®re d\'une Semaine',
        description: `${progress.streak} jours cons√©cutifs ! Tu es incroyable, ${userName} !`,
        icon: 'üî•',
        color: 'orange'
      });
    }

    // Total sessions achievements
    if (progress.totalSessions >= 50) {
      achievements.push({
        id: 'session_master',
        title: 'Ma√Ætre des Sessions',
        description: `${progress.totalSessions} entra√Ænements ! Tu es une vraie athl√®te !`,
        icon: 'üí™',
        color: 'purple'
      });
    } else if (progress.totalSessions >= 25) {
      achievements.push({
        id: 'quarter_century',
        title: 'Quart de Si√®cle',
        description: `${progress.totalSessions} sessions ! Tu progresses √† vitesse grand V !`,
        icon: 'üöÄ',
        color: 'blue'
      });
    } else if (progress.totalSessions >= 10) {
      achievements.push({
        id: 'double_digits',
        title: 'Double Chiffres',
        description: `${progress.totalSessions} entra√Ænements ! Tu prends le rythme !`,
        icon: '‚≠ê',
        color: 'green'
      });
    }
  }

  // Goal-based achievements
  const goals = profile?.fitnessProfile?.goals || [];
  if (goals.includes('course_√†_pied') && goals.includes('renforcement_musculaire')) {
    achievements.push({
      id: 'balanced_athlete',
      title: 'Athl√®te √âquilibr√©e',
      description: `${userName}, cardio ET force ! Tu as tout compris !`,
      icon: '‚öñÔ∏è',
      color: 'pink'
    });
  }

  return achievements;
};

/**
 * Generate personalized health insights based on BMI and profile
 */
export const getPersonalizedHealthInsights = (profile) => {
  const insights = [];
  const bmi = profile?.personalInfo?.bmi;
  const userName = profile?.personalInfo?.name || 'Utilisateur';

  if (bmi) {
    if (bmi >= 18.5 && bmi < 25) {
      insights.push({
        type: 'success',
        title: 'IMC Parfait',
        message: `${userName}, ton IMC de ${bmi} est dans la fourchette id√©ale ! üéØ`,
        advice: 'Continue avec ton programme √©quilibr√© pour maintenir cette excellente forme !'
      });
    } else if (bmi < 18.5) {
      insights.push({
        type: 'info',
        title: 'Focus Renforcement',
        message: `${userName}, concentre-toi sur le d√©veloppement musculaire ! üí™`,
        advice: 'Ajoute plus d\'exercices de renforcement et assure-toi d\'avoir une nutrition adapt√©e.'
      });
    } else if (bmi >= 25 && bmi < 30) {
      insights.push({
        type: 'warning',
        title: '√âquilibre Cardio-Force',
        message: `${userName}, combine cardio et renforcement pour optimiser ta composition ! ‚ö°`,
        advice: 'Varie tes entra√Ænements entre cardio pour br√ªler et force pour tonifier.'
      });
    }
  }

  // Age-based insights
  const age = profile?.personalInfo?.age;
  if (age && age >= 40) {
    insights.push({
      type: 'info',
      title: 'R√©cup√©ration Premium',
      message: `${userName}, la r√©cup√©ration devient encore plus importante ! üßò‚Äç‚ôÄÔ∏è`,
      advice: 'N\'oublie pas les √©tirements et prends des jours de repos r√©guliers.'
    });
  }

  return insights;
};

/**
 * Generate personalized calorie estimates
 */
export const getPersonalizedCalorieEstimate = (profile, workoutType, duration) => {
  if (!profile?.personalInfo?.weight) return null;

  const weight = profile.personalInfo.weight;
  const age = profile.personalInfo.age || 25;
  const fitnessLevel = profile.fitnessProfile.level || 'd√©butante';

  // Adjust MET values based on fitness level
  const levelMultiplier = {
    'd√©butante': 0.8,
    'interm√©diaire': 1.0,
    'avanc√©e': 1.2
  };

  const baseMET = {
    'running': 8.0,
    'strength_training': 6.0,
    'cardio': 7.0,
    'mixed': 6.5,
    'yoga': 3.0,
    'walking': 3.5
  };

  const met = (baseMET[workoutType] || 6.5) * levelMultiplier[fitnessLevel];
  const caloriesPerMinute = (met * weight * 3.5) / 200;
  
  return Math.round(caloriesPerMinute * duration);
};

/**
 * Get all personalized content for dashboard
 */
export const getPersonalizedDashboardContent = async (profile, progress) => {
  return {
    greeting: getPersonalizedGreeting(profile),
    motivation: getPersonalizedMotivation(profile, progress),
    workoutSuggestion: getPersonalizedWorkoutSuggestion(profile),
    achievements: getPersonalizedAchievements(profile, progress),
    healthInsights: getPersonalizedHealthInsights(profile),
    userName: profile?.personalInfo?.name || 'Utilisateur'
  };
};

export default {
  getPersonalizedGreeting,
  getPersonalizedMotivation,
  getPersonalizedWorkoutSuggestion,
  getPersonalizedAchievements,
  getPersonalizedHealthInsights,
  getPersonalizedCalorieEstimate,
  getPersonalizedDashboardContent
};
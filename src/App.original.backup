/**
 * Main Application Component
 * 
 * This is the root component of the Custom Workout Generator app.
 * It manages global state, routing, and provides the main application structure
 * with Firebase integration and theme management.
 */

import React, { useState, useEffect, createContext, useContext } from 'react';
import styled, { ThemeProvider, createGlobalStyle } from 'styled-components';
import WorkoutGenerator from './components/WorkoutGenerator';
import ExerciseDetails from './components/ExerciseDetails';
import ProgressDashboard from './components/ProgressDashboard';
import ErrorBoundary from './components/ErrorBoundary';
import LoadingSpinner from './components/LoadingSpinner';
import PersonalizedDashboard from './components/PersonalizedDashboard';
import EllaProfile from './components/EllaProfile';
import MilestoneTracker from './components/MilestoneTracker';
import OnboardingFlow from './components/OnboardingFlow';
import { userProgressService } from './services/firebaseService';
import userProfileService from './services/userProfileService';
import { generateEllaWorkout } from './services/ellaWorkoutService';
import logoImg from './logo_run.png';

// Theme configuration for pink/white aesthetic
const theme = {
  colors: {
    primary: '#ff69b4',
    primaryDark: '#e91e63',
    primaryLight: '#ffb3d9',
    secondary: '#ffffff',
    accent: '#f8f9fa',
    text: {
      primary: '#333333',
      secondary: '#666666',
      light: '#999999',
      white: '#ffffff'
    },
    background: {
      primary: '#ffffff',
      secondary: '#ffeef8',
      gradient: 'linear-gradient(135deg, #ffeef8 0%, #ffffff 100%)'
    },
    border: '#e8e8e8',
    shadow: '0 4px 20px rgba(255, 105, 180, 0.1)',
    shadowHover: '0 8px 30px rgba(255, 105, 180, 0.15)',
    error: '#ff4444',
    success: '#4caf50',
    warning: '#ff9800'
  },
  fonts: {
    primary: "'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif",
    sizes: {
      xs: '0.75rem',
      sm: '0.875rem',
      md: '1rem',
      lg: '1.125rem',
      xl: '1.25rem',
      xxl: '1.5rem',
      xxxl: '2rem'
    },
    weights: {
      light: 300,
      normal: 400,
      medium: 500,
      semibold: 600,
      bold: 700
    }
  },
  spacing: {
    xs: '0.5rem',
    sm: '1rem',
    md: '1.5rem',
    lg: '2rem',
    xl: '3rem',
    xxl: '4rem'
  },
  borderRadius: {
    small: '8px',
    medium: '12px',
    large: '16px',
    pill: '50px'
  },
  breakpoints: {
    mobile: '768px',
    tablet: '1024px',
    desktop: '1200px'
  }
};

// Global styles for the application
const GlobalStyle = createGlobalStyle`
  body {
    font-family: ${props => props.theme.fonts.primary};
    background: ${props => props.theme.colors.background.gradient};
    color: ${props => props.theme.colors.text.primary};
    line-height: 1.6;
  }

  * {
    box-sizing: border-box;
  }

  button {
    font-family: ${props => props.theme.fonts.primary};
  }

  // Smooth scrolling
  html {
    scroll-behavior: smooth;
  }

  // Focus styles for accessibility
  *:focus {
    outline: 2px solid ${props => props.theme.colors.primary};
    outline-offset: 2px;
  }
`;

// Application Context for global state management
const AppContext = createContext();

export const useAppContext = () => {
  const context = useContext(AppContext);
  if (!context) {
    throw new Error('useAppContext must be used within an AppProvider');
  }
  return context;
};

// Main App Container
const AppContainer = styled.div`
  min-height: 100vh;
  display: flex;
  flex-direction: column;
`;

// Header Component
const Header = styled.header`
  background: linear-gradient(135deg, ${props => props.theme.colors.secondary} 0%, ${props => props.theme.colors.background.secondary} 100%);
  box-shadow: ${props => props.theme.colors.shadow};
  padding: ${props => props.theme.spacing.lg} 0;
  position: sticky;
  top: 0;
  z-index: 100;
  border-bottom: 3px solid ${props => props.theme.colors.primary};
`;

const HeaderContent = styled.div`
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 ${props => props.theme.spacing.md};
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: ${props => props.theme.spacing.lg};
`;

const BrandContainer = styled.div`
  display: flex;
  align-items: center;
  gap: ${props => props.theme.spacing.md};
  cursor: pointer;
  transition: transform 0.3s ease;
  
  &:hover {
    transform: translateY(-2px);
  }
  
  @media (max-width: ${props => props.theme.breakpoints.mobile}) {
    gap: ${props => props.theme.spacing.sm};
  }
`;

const LogoImg = styled.img`
  height: 80px;           // Much larger and more prominent
  width: auto;
  border-radius: 16px;    // More rounded for modern look
  box-shadow: 0 4px 20px rgba(255, 105, 180, 0.3); // More prominent shadow
  object-fit: contain;
  display: block;
  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  
  &:hover {
    transform: scale(1.08) rotate(1deg);
    box-shadow: 0 8px 32px rgba(255, 105, 180, 0.4);
  }
  
  @media (max-width: ${props => props.theme.breakpoints.mobile}) {
    height: 60px;
  }
`;

const BrandText = styled.div`
  display: flex;
  flex-direction: column;
  gap: 2px;
  
  @media (max-width: ${props => props.theme.breakpoints.mobile}) {
    display: none; // Hide on mobile to save space
  }
`;

const AppTitle = styled.h1`
  font-size: ${props => props.theme.fonts.sizes.xl};
  font-weight: ${props => props.theme.fonts.weights.bold};
  color: ${props => props.theme.colors.primary};
  margin: 0;
  line-height: 1.2;
  background: linear-gradient(135deg, ${props => props.theme.colors.primary} 0%, ${props => props.theme.colors.primaryDark} 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
`;

const AppSubtitle = styled.p`
  font-size: ${props => props.theme.fonts.sizes.sm};
  font-weight: ${props => props.theme.fonts.weights.medium};
  color: ${props => props.theme.colors.text.secondary};
  margin: 0;
  font-style: italic;
`;

const Navigation = styled.nav`
  display: flex;
  gap: ${props => props.theme.spacing.sm};
  flex-wrap: wrap;
  
  @media (max-width: ${props => props.theme.breakpoints.mobile}) {
    gap: ${props => props.theme.spacing.xs};
  }
`;

const NavButton = styled.button`
  background: ${props => props.active ? props.theme.colors.primary : 'transparent'};
  color: ${props => props.active ? props.theme.colors.text.white : props.theme.colors.text.primary};
  border: 2px solid ${props => props.theme.colors.primary};
  padding: ${props => props.theme.spacing.xs} ${props => props.theme.spacing.md};
  border-radius: ${props => props.theme.borderRadius.pill};
  font-weight: ${props => props.theme.fonts.weights.medium};
  font-size: ${props => props.theme.fonts.sizes.sm};
  cursor: pointer;
  transition: all 0.3s ease;

  &:hover {
    background: ${props => props.theme.colors.primary};
    color: ${props => props.theme.colors.text.white};
    transform: translateY(-2px);
    box-shadow: ${props => props.theme.colors.shadowHover};
  }

  &:active {
    transform: translateY(0);
  }

  @media (max-width: ${props => props.theme.breakpoints.mobile}) {
    padding: ${props => props.theme.spacing.xs} ${props => props.theme.spacing.sm};
    font-size: ${props => props.theme.fonts.sizes.xs};
    min-width: auto;
  }
`;

// Main Content Area
const MainContent = styled.main`
  flex: 1;
  max-width: 1200px;
  margin: 0 auto;
  padding: ${props => props.theme.spacing.xl} ${props => props.theme.spacing.md};
  width: 100%;
  
  @media (max-width: ${props => props.theme.breakpoints.mobile}) {
    padding: ${props => props.theme.spacing.lg} ${props => props.theme.spacing.sm};
  }
`;

// Footer Component
const Footer = styled.footer`
  background: ${props => props.theme.colors.secondary};
  padding: ${props => props.theme.spacing.lg} 0;
  text-align: center;
  color: ${props => props.theme.colors.text.secondary};
  border-top: 1px solid ${props => props.theme.colors.border};
`;

// App States
const APP_STATES = {
  HOME: 'home',
  WORKOUT_GENERATOR: 'workout_generator',
  EXERCISE_DETAILS: 'exercise_details',
  PROGRESS: 'progress',
  PROFILE: 'profile',
  ACHIEVEMENTS: 'achievements'
};

/**
 * Main App Component
 */
function App() {
  // Application state
  const [currentView, setCurrentView] = useState(APP_STATES.HOME);
  const [currentWorkout, setCurrentWorkout] = useState(null);
  const [selectedExercise, setSelectedExercise] = useState(null);
  const [userProgress, setUserProgress] = useState(null);
  const [onboardingCompleted, setOnboardingCompleted] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  // Load user data and check onboarding status on app initialization
  useEffect(() => {
    initializeApp();
  }, []);

  /**
   * Initialize the application and check onboarding status
   */
  const initializeApp = async () => {
    try {
      setIsLoading(true);
      
      // Check if user has completed onboarding
      const onboardingStatus = await userProfileService.checkOnboardingStatus();
      
      if (onboardingStatus.completed && onboardingStatus.profile) {
        // User has completed onboarding, load their data
        setOnboardingCompleted(true);
        
        // Load progress data
        const progress = await userProgressService.getProgressStats();
        setUserProgress(progress);
      } else {
        // User needs to complete onboarding
        setOnboardingCompleted(false);
      }
      
    } catch (error) {
      console.error('Error initializing app:', error);
      setError('Failed to load user data');
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * Load user progress statistics
   */
  const loadUserProgress = async () => {
    try {
      setIsLoading(true);
      const progress = await userProgressService.getProgressStats();
      setUserProgress(progress);
    } catch (error) {
      console.error('Error loading user progress:', error);
      // Don't show error for progress loading failure
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * Handle workout generation completion
   */
  const handleWorkoutGenerated = (workout) => {
    setCurrentWorkout(workout);
    setError(null);
  };

  /**
   * Generate Ella's personalized workout
   */
  const handleGenerateEllaWorkout = async () => {
    try {
      setIsLoading(true);
      const workoutResult = await generateEllaWorkout();
      
      if (workoutResult.success) {
        handleWorkoutGenerated(workoutResult.data);
        setCurrentView(APP_STATES.WORKOUT_GENERATOR);
      }
    } catch (error) {
      handleError(error);
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * Handle exercise selection
   */
  const handleExerciseSelect = (exercise) => {
    setSelectedExercise(exercise);
    setCurrentView(APP_STATES.EXERCISE_DETAILS);
  };

  /**
   * Handle navigation between views
   */
  const handleNavigate = (view) => {
    setCurrentView(view);
    setError(null);
  };

  /**
   * Handle global error states
   */
  const handleError = (error) => {
    setError(error);
    console.error('App Error:', error);
  };

  /**
   * Clear current error
   */
  const clearError = () => {
    setError(null);
  };

  // Context value for child components
  const contextValue = {
    currentWorkout,
    setCurrentWorkout,
    selectedExercise,
    setSelectedExercise,
    userProgress,
    loadUserProgress,
    handleError,
    clearError,
    isLoading,
    setIsLoading
  };

  /**
   * Render current view based on state
   */
  const renderCurrentView = () => {
    switch (currentView) {
      case APP_STATES.HOME:
        return (
          <PersonalizedDashboard
            onStartWorkout={handleGenerateEllaWorkout}
          />
        );
      case APP_STATES.WORKOUT_GENERATOR:
        return (
          <WorkoutGenerator
            onWorkoutGenerated={handleWorkoutGenerated}
            onExerciseSelect={handleExerciseSelect}
            currentWorkout={currentWorkout}
            isPersonalized={true}
          />
        );
      case APP_STATES.EXERCISE_DETAILS:
        return (
          <ExerciseDetails
            exercise={selectedExercise}
            onBack={() => setCurrentView(APP_STATES.WORKOUT_GENERATOR)}
          />
        );
      case APP_STATES.PROGRESS:
        return (
          <ProgressDashboard
            progress={userProgress}
            onRefresh={loadUserProgress}
          />
        );
      case APP_STATES.PROFILE:
        return <EllaProfile />;
      case APP_STATES.ACHIEVEMENTS:
        return <MilestoneTracker />;
      default:
        return (
          <PersonalizedDashboard
            onStartWorkout={handleGenerateEllaWorkout}
          />
        );
    }
  };

  // Show loading screen during initialization
  if (isLoading) {
    return (
      <ThemeProvider theme={theme}>
        <GlobalStyle />
        <LoadingSpinner 
          fullHeight={true} 
          text="Initialisation d'ELLA Run..."
          motivationalText="Préparation de ton expérience personnalisée ! ✨"
          size="large"
        />
      </ThemeProvider>
    );
  }

  // Show onboarding flow if not completed
  if (!onboardingCompleted) {
    return (
      <ThemeProvider theme={theme}>
        <GlobalStyle />
        <ErrorBoundary onError={handleError}>
          <OnboardingFlow />
        </ErrorBoundary>
      </ThemeProvider>
    );
  }

  // Show main application
  return (
    <ThemeProvider theme={theme}>
      <GlobalStyle />
      <ErrorBoundary onError={handleError}>
        <AppContext.Provider value={contextValue}>
          <AppContainer>
            {/* Header */}
            <Header>
              <HeaderContent>
                <BrandContainer onClick={() => handleNavigate(APP_STATES.HOME)}>
                  <LogoImg src={logoImg} alt="ELLA Run Logo" />
                  <BrandText>
                    <AppTitle>ELLA Run</AppTitle>
                    <AppSubtitle>Personal Trainer</AppSubtitle>
                  </BrandText>
                </BrandContainer>
                <Navigation>
                  <NavButton
                    active={currentView === APP_STATES.HOME}
                    onClick={() => handleNavigate(APP_STATES.HOME)}
                  >
                    🏠 Accueil
                  </NavButton>
                  <NavButton
                    active={currentView === APP_STATES.WORKOUT_GENERATOR}
                    onClick={() => handleNavigate(APP_STATES.WORKOUT_GENERATOR)}
                  >
                    💪 Entraînement
                  </NavButton>
                  <NavButton
                    active={currentView === APP_STATES.PROFILE}
                    onClick={() => handleNavigate(APP_STATES.PROFILE)}
                  >
                    👤 Profil
                  </NavButton>
                  <NavButton
                    active={currentView === APP_STATES.PROGRESS}
                    onClick={() => handleNavigate(APP_STATES.PROGRESS)}
                  >
                    📊 Progrès
                  </NavButton>
                  <NavButton
                    active={currentView === APP_STATES.ACHIEVEMENTS}
                    onClick={() => handleNavigate(APP_STATES.ACHIEVEMENTS)}
                  >
                    🏆 Réussites
                  </NavButton>
                </Navigation>
              </HeaderContent>
            </Header>

            {/* Main Content */}
            <MainContent>
              {/* Global Loading State */}
              {isLoading && <LoadingSpinner />}
              
              {/* Global Error Display */}
              {error && (
                <ErrorMessage>
                  <strong>Erreur:</strong> {error.message || error}
                  <button onClick={clearError}>Fermer</button>
                </ErrorMessage>
              )}

              {/* Current View */}
              {renderCurrentView()}
            </MainContent>

            {/* Footer */}
            <Footer>
              <p>Créé avec 💖 pour l'incroyable parcours fitness d'Ella • Tu deviens plus forte chaque jour ! 🌟</p>
            </Footer>
          </AppContainer>
        </AppContext.Provider>
      </ErrorBoundary>
    </ThemeProvider>
  );
}

// Error Message Component
const ErrorMessage = styled.div`
  background: ${props => props.theme.colors.error};
  color: white;
  padding: ${props => props.theme.spacing.md};
  border-radius: ${props => props.theme.borderRadius.medium};
  margin-bottom: ${props => props.theme.spacing.md};
  display: flex;
  justify-content: space-between;
  align-items: center;

  button {
    background: transparent;
    border: 1px solid white;
    color: white;
    padding: ${props => props.theme.spacing.xs};
    border-radius: ${props => props.theme.borderRadius.small};
    cursor: pointer;
    
    &:hover {
      background: white;
      color: ${props => props.theme.colors.error};
    }
  }
`;

export default App;